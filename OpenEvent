/**
 * @author Malte Olofsson, Oskar Dahlbeck, Filip Bergström, Lana Abdulla
 *
 */
public class OpenEvent extends Event {
	private Supermarket mySupermarket;
	private double happeningTime;
	private double closingTime;
	private CloseEvent closeEvent;
	private ExponentialRandomStream randomArrival;
	private ArrivalEvent arrivalEvent;
	private String eventName = "Open";
	private EventQueue eventQueue;
	private State state;
	private StopEvent stop;
	
	public OpenEvent(Supermarket s, EventQueue eventQueue, State state) {
		this.mySupermarket = s;
		happeningTime = 0;
		this.eventQueue = eventQueue;
		this.state = state;
	}
	
	/**
	 * Effect of the OpenEvent, creates the next event and updates the time and opens the shop.
	 */
	
	public void effekt(){
		state.setCurrentEvent(this);
		mySupermarket.setOpen();
		closingTime = mySupermarket.getClosingTime();
		stop = new StopEvent(state,mySupermarket);
		eventQueue.addEvent(stop);
		closeEvent = new CloseEvent(mySupermarket, state); //Skapar ett closeEvent direkt när butiken öppnar
		eventQueue.addEvent(closeEvent);
		double arrivalTime = 0;
		
		randomArrival = new ExponentialRandomStream(mySupermarket.getLambda(), mySupermarket.getSeed());
		while(arrivalTime < closingTime) { //Skapar alla arrivalEvents när butiken öppnar.
			
			
			arrivalTime += mySupermarket.getArrivalTime();
			arrivalEvent = new ArrivalEvent(mySupermarket, eventQueue, arrivalTime, state);
			eventQueue.addEvent(arrivalEvent);
		}
	}
	
	public String getEventName(){
		return eventName;
	}
	public double getTime() {
		return happeningTime;
	}
	public int getCustomerNr() {
		return 0;
	}
}
