/**
 * 
 */

/**
 * @author Malte Olofsson, olomal-8
 *
 */
public class ShoppingEvent extends Event {
	private Supermarket s;
	private EventQueue eventQueue;
	private double happeningTime;
	
	private Kassa kassa;
	private Customer customer;
	private String eventName = "Shopping";
	private State state;
	
	public ShoppingEvent(Supermarket s, EventQueue eventQueue, Customer customer, double currentTime, State state) {
		this.s = s;
		
		this.happeningTime = currentTime;
		this.customer = customer;
		this.state = state;
		this.eventQueue = eventQueue;
		
	}
	public String getEventName() {
		return eventName;
	}
	
	void effekt() {
		
		s.updateTime(happeningTime);
		s.addTimeInQueue(s.getCurrentTime(), s.getPastEventTime());
		s.addKassaEmpty(s.getCurrentTime(), s.getPastEventTime());
		state.setCurrentEvent(this);
		
		if (s.getNrKassaEmpty() > 0 && s.getCustomerQueue().size() == 0) {  // Kollar om någon kassa är tom samt om kön är tom
			
			for(Kassa k : s.getKassor()) {
				if(k.isEmpty()) {
					kassa = k;
				}
			}
			
			kassa.setFalse();
			eventQueue.addEvent(new PayEvent(s, eventQueue, customer, happeningTime+s.getPayTime().next(),kassa, state));						// om detta är fallet skapas ett nytt payevent
		}
		
		else {
			s.addTotalQueued();
			s.addCustomerInQueue(customer);										// Om inte läggs personen i kön
		}
		
		
	}

	
	public double getTime() {
		return happeningTime;
	}
	
	public int getCustomerNr() {
		return customer.getCustomerNumber();
	}

}
